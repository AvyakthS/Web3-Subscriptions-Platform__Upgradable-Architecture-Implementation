// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Subscribed extends ethereum.Event {
  get params(): Subscribed__Params {
    return new Subscribed__Params(this);
  }
}

export class Subscribed__Params {
  _event: Subscribed;

  constructor(event: Subscribed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get expiry(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubscriptionPaused extends ethereum.Event {
  get params(): SubscriptionPaused__Params {
    return new SubscriptionPaused__Params(this);
  }
}

export class SubscriptionPaused__Params {
  _event: SubscriptionPaused;

  constructor(event: SubscriptionPaused) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubscriptionPlan extends ethereum.SmartContract {
  static bind(address: Address): SubscriptionPlan {
    return new SubscriptionPlan("SubscriptionPlan", address);
  }

  BENEFICIARY(): Address {
    let result = super.call("BENEFICIARY", "BENEFICIARY():(address)", []);

    return result[0].toAddress();
  }

  try_BENEFICIARY(): ethereum.CallResult<Address> {
    let result = super.tryCall("BENEFICIARY", "BENEFICIARY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOKEN(): Address {
    let result = super.call("TOKEN", "TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOKEN", "TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PRICE(): BigInt {
    let result = super.call("PRICE", "PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRICE", "PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}
